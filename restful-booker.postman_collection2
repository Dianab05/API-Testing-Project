{
	"info": {
		"_postman_id": "fc41a5c5-2239-49bb-af0f-055deef58f69",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34508137"
	},
	"item": [
		{
			"name": "Verify that the API is up an running",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response body matches string Created\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Verify if the response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'Created'\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/ping",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth - CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/auth?",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"auth"
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if all the ids of the bookings are displayed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Verify if the response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if bookings can be filtered by firstname/lastname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Verify if the response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking?firstname=John&lastname=Smith",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "John"
						},
						{
							"key": "lastname",
							"value": "Smith"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if bookings can be filtered by checkin/checkout date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Verify if the response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking?checkin=2014-03-13",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "2014-03-13"
						},
						{
							"key": "checkout",
							"value": "2014-05-21",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if informations are displayed about one specific booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Verify if the response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking/:id",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "19"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify if informations cannot be displayed about an invalid booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Not Found'\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking/:id",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if a new booking can be created",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"firstname\" : \"Robert\" ,\r\n    \"lastname\" : \"Emery\",\r\n    \"totalprice\" : 250,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"01-01-2023\",\r\n        \"checkout\" : \"01.01.2012\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if a new booking cannot be created if one body field is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Bad Request'\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"firstname\" : \"Robert\" ,\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : ,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"01-01-2023\",\r\n        \"checkout\" : \"01.01.2012\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if a new booking cannot be created if one request body field is not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 500\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Internal Server Error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Internal Server Error'\", function () {\r",
							"    pm.response.to.have.status(\"Internal Server Error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"firstname1\" : \"Robert\" ,\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : 300,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"01-01-2023\",\r\n        \"checkout\" : \"01.01.2012\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if a current booking can be updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Verify if the response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Sam\",\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify if a current booking cannot be updated without authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Forbidden\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Forbidden'\", function () {\r",
							"    pm.response.to.have.status(\"Forbidden\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Sam\",\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if an invalid booking cannot be updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 405\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Method Not Allowed\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Method Not Allowed'\", function () {\r",
							"    pm.response.to.have.status(\"Method Not Allowed\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Sam\",\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/29388",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"29388"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if an invalid booking cannot be updated Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 405\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Method Not Allowed\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Method Not Allowed'\", function () {\r",
							"    pm.response.to.have.status(\"Method Not Allowed\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Sam\",\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/29388",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"29388"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify that PUT action cannot be performed without a booking id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Not Found'\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname1\" : \"Sam\",\r\n    \"lastname2\" : \"Smith\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify if a current booking cannot be updated if one request body field is missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Bad Request'\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Sam\",\r\n    \"lastname\" : \"Smith\",\r\n    \"totalprice\" : 1000,\r\n   \r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if a current booking can be updated with partial payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Samuel\",\r\n    \"lastname\" : \"Smith\",\r\n     \"additionalneeds\" : \"All inclusive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if a current booking cannot be updated without authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Forbidden\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Forbidden'\", function () {\r",
							"    pm.response.to.have.status(\"Forbidden\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Samuel\",\r\n    \"lastname\" : \"Smith\",\r\n     \"additionalneeds\" : \"All inclusive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if a current booking cannot be updated if request body fields are not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Bad Request'\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname1\" : 201,\r\n    \"lastname!!!!!\" : \"Smith\",\r\n     \"testfield1\" : \"negative testing1\",\r\n     \"additionalneeds???\" : \"All inclusive\",\r\n     \"testfield2\" : \"negative testing2\",\r\n     \"totalprice\" : -250\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing- Verify if an invalid booking cannot be updated with partial payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 405\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Method Not Allowed\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Method Not Allowed'\", function () {\r",
							"    pm.response.to.have.status(\"Method Not Allowed\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Samuel\",\r\n    \"lastname\" : \"Smith\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/12349284",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"12349284"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify that PATCH action cannot be performed without a booking id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Not Found'\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic 6b9571bf13caf8a",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=<{{Token}}>",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Samuel\",\r\n    \"lastname\" : \"Smith\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify if an existing booking can be deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"pm.test(\"Verify the status code name is 'Created'\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/booking/19",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"19"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify if an invalid booking cannot be deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 405\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Method Not Allowed\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Method Not Allowed'\", function () {\r",
							"    pm.response.to.have.status(\"Method Not Allowed\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/booking/123131",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"123131"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify if an existing booking cannot be deleted without authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Forbidden\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Forbidden'\", function () {\r",
							"    pm.response.to.have.status(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/booking/21",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative testing - Verify that DELETE action cannot be performed without a booking id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response has the required fields\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Not Found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the status code name is 'Not Found'\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/booking/",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		},
		{
			"key": "Token",
			"value": "----",
			"type": "string"
		}
	]
}